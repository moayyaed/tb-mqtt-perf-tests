<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright Â© 2016-2023 The Thingsboard Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.thingsboard.mqtt-broker</groupId>
    <artifactId>performance-tests</artifactId>
    <version>1.0.49</version>
    <packaging>jar</packaging>

    <name>ThingsBoard MQTT Broker Performance Tests</name>
    <inceptionYear>2016</inceptionYear>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>11</java.version>
        <spring-boot.version>2.2.6.RELEASE</spring-boot.version>
        <commons-lang3.version>3.4</commons-lang3.version>
        <commons-math3.version>3.6.1</commons-math3.version>
        <lombok.version>1.18.16</lombok.version>
        <spring.version>5.2.6.RELEASE</spring.version>
        <jackson.version>2.11.3</jackson.version>
        <netty.version>4.1.65.Final</netty.version>
        <guava.version>28.2-jre</guava.version>
        <dockerfile-maven.version>1.4.13</dockerfile-maven.version>

        <pkg.name>tb-mqtt-broker-performance-tests</pkg.name>
        <pkg.user>thingsboard</pkg.user>
        <pkg.unixLogFolder>/var/log/${pkg.name}</pkg.unixLogFolder>
        <pkg.installFolder>/usr/share/${pkg.name}</pkg.installFolder>
        <docker.repo>thingsboard</docker.repo>
        <dockerfile.skip>true</dockerfile.skip>
        <docker.name>tb-mqtt-broker-performance-tests</docker.name>
        <pkg.implementationTitle>ThingsBoard MQTT Broker Performance Tests</pkg.implementationTitle>
        <pkg.mainClass>org.thingsboard.mqtt.broker.tools.PerformanceTestsApplication</pkg.mainClass>
        <docker.push-arm-amd-image.phase>pre-integration-test</docker.push-arm-amd-image.phase>
    </properties>

    <build>
        <finalName>${pkg.name}-${project.version}</finalName>
        <resources>
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
            </resource>
        </resources>
        <extensions>
            <extension>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-extension</artifactId>
                <version>${dockerfile-maven.version}</version>
            </extension>
        </extensions>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.0</version>
                    <configuration>
                        <source>11</source>
                        <target>11</target>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>2.7</version>
                    <executions>
                        <execution>
                            <id>copy-docker-deb</id>
                            <phase>pre-integration-test</phase>
                            <goals>
                                <goal>copy-resources</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.build.directory}/docker</outputDirectory>
                                <resources>
                                    <resource>
                                        <directory>${project.build.directory}</directory>
                                        <includes>
                                            <include>${pkg.name}.deb</include>
                                        </includes>
                                    </resource>
                                </resources>
                            </configuration>
                        </execution>
                        <execution>
                            <id>copy-conf</id>
                            <phase>process-resources</phase>
                            <goals>
                                <goal>copy-resources</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.build.directory}/conf</outputDirectory>
                                <resources>
                                    <resource>
                                        <directory>src/main/resources</directory>
                                        <excludes>
                                            <exclude>logback.xml</exclude>
                                        </excludes>
                                        <filtering>false</filtering>
                                    </resource>
                                </resources>
                            </configuration>
                        </execution>
                        <execution>
                            <id>copy-service-conf</id>
                            <phase>process-resources</phase>
                            <goals>
                                <goal>copy-resources</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.build.directory}/conf</outputDirectory>
                                <resources>
                                    <resource>
                                        <directory>src/main/conf</directory>
                                        <filtering>true</filtering>
                                    </resource>
                                </resources>
                                <filters>
                                    <filter>${basedir}/src/main/filters/unix.properties</filter>
                                </filters>
                            </configuration>
                        </execution>
                        <execution>
                            <id>copy-control</id>
                            <phase>process-resources</phase>
                            <goals>
                                <goal>copy-resources</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.build.directory}/control</outputDirectory>
                                <resources>
                                    <resource>
                                        <directory>${basedir}/src/main/scripts/control</directory>
                                        <filtering>true</filtering>
                                    </resource>
                                </resources>
                                <filters>
                                    <filter>${basedir}/src/main/filters/unix.properties</filter>
                                </filters>
                            </configuration>
                        </execution>
                        <execution>
                            <id>copy-install</id>
                            <phase>process-resources</phase>
                            <goals>
                                <goal>copy-resources</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.build.directory}/bin/install</outputDirectory>
                                <resources>
                                    <resource>
                                        <directory>${basedir}/src/main/scripts/install</directory>
                                        <includes>
                                            <include>**/*.sh</include>
                                            <include>**/*.xml</include>
                                        </includes>
                                        <filtering>true</filtering>
                                    </resource>
                                </resources>
                                <filters>
                                    <filter>${basedir}/src/main/filters/unix.properties</filter>
                                </filters>
                            </configuration>
                        </execution>
                        <execution>
                            <id>copy-data</id>
                            <phase>process-resources</phase>
                            <goals>
                                <goal>copy-resources</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.build.directory}/data</outputDirectory>
                                <resources>
                                    <resource>
                                        <directory>src/main/data</directory>
                                    </resource>
                                    <resource>
                                        <directory>../dao/src/main/resources</directory>
                                        <includes>
                                            <include>**/*.cql</include>
                                            <include>**/*.sql</include>
                                        </includes>
                                        <filtering>false</filtering>
                                    </resource>
                                </resources>
                            </configuration>
                        </execution>
                        <execution>
                            <id>copy-docker-config</id>
                            <phase>process-resources</phase>
                            <goals>
                                <goal>copy-resources</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.build.directory}/docker</outputDirectory>
                                <resources>
                                    <resource>
                                        <directory>docker</directory>
                                        <filtering>true</filtering>
                                    </resource>
                                </resources>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>2.2.1</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot.version}</version>
                    <configuration>
                        <mainClass>${pkg.mainClass}</mainClass>
                        <classifier>boot</classifier>
                        <layout>ZIP</layout>
                        <executable>true</executable>
                        <excludeDevtools>true</excludeDevtools>
                        <embeddedLaunchScriptProperties>
                            <confFolder>${pkg.installFolder}/conf</confFolder>
                            <logFolder>${pkg.unixLogFolder}</logFolder>
                            <logFilename>${pkg.name}.out</logFilename>
                            <initInfoProvides>${pkg.name}</initInfoProvides>
                        </embeddedLaunchScriptProperties>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.thingsboard</groupId>
                    <artifactId>gradle-maven-plugin</artifactId>
                    <version>1.0.10</version>
                    <configuration>
                        <gradleProjectDirectory>${basedir}</gradleProjectDirectory>
                        <tasks>
                            <task>build</task>
                            <task>buildDeb</task>
                            <task>renameDeb</task>
                        </tasks>
                        <args>
                            <arg>-PpackagingDir=${basedir}</arg>
                            <arg>-PprojectBuildDir=${basedir}/target</arg>
                            <arg>-PprojectVersion=${project.version}</arg>
                            <arg>
                                -PmainJar=${project.build.directory}/${project.build.finalName}-boot.${project.packaging}
                            </arg>
                            <arg>-PpkgName=${pkg.name}</arg>
                            <arg>-PpkgUser=${pkg.user}</arg>
                            <arg>-PpkgInstallFolder=${pkg.installFolder}</arg>
                            <arg>-PpkgLogFolder=${pkg.unixLogFolder}</arg>
                            <arg>--warning-mode</arg>
                            <arg>all</arg>
                        </args>
                    </configuration>
                    <executions>
                        <execution>
                            <phase>package</phase>
                            <goals>
                                <goal>invoke</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>3.0.0-M1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>3.0.0-M1</version>
                    <configuration>
                        <file>${project.build.directory}/${pkg.name}.deb</file>
                        <artifactId>${project.artifactId}</artifactId>
                        <groupId>${project.groupId}</groupId>
                        <version>${project.version}</version>
                        <classifier>deb</classifier>
                        <packaging>deb</packaging>
                    </configuration>
                    <executions>
                        <execution>
                            <id>install-deb</id>
                            <phase>package</phase>
                            <goals>
                                <goal>install-file</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>1.12</version>
                    <executions>
                        <execution>
                            <id>add-source</id>
                            <phase>generate-sources</phase>
                            <goals>
                                <goal>add-source</goal>
                            </goals>
                            <configuration>
                                <sources>
                                    <source>${basedir}/target/generated-sources</source>
                                </sources>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>
                                            org.apache.maven.plugins
                                        </groupId>
                                        <artifactId>
                                            maven-antrun-plugin
                                        </artifactId>
                                        <versionRange>
                                            [1.3,)
                                        </versionRange>
                                        <goals>
                                            <goal>run</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore></ignore>
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>com.mycila</groupId>
                    <artifactId>license-maven-plugin</artifactId>
                    <version>3.0</version>
                    <configuration>
                        <header>${basedir}/license-header-template.txt</header>
                        <properties>
                            <owner>The Thingsboard Authors</owner>
                        </properties>
                        <excludes>
                            <exclude>**/.env</exclude>
                            <exclude>**/*.env</exclude>
                            <exclude>**/.eslintrc</exclude>
                            <exclude>**/.babelrc</exclude>
                            <exclude>**/.jshintrc</exclude>
                            <exclude>**/.gradle/**</exclude>
                            <exclude>**/nightwatch</exclude>
                            <exclude>**/README</exclude>
                            <exclude>**/LICENSE</exclude>
                            <exclude>**/banner.txt</exclude>
                            <exclude>**/*.properties</exclude>
                            <exclude>src/test/resources/**</exclude>
                            <exclude>src/vendor/**</exclude>
                            <exclude>src/font/**</exclude>
                            <exclude>src/sh/**</exclude>
                            <exclude>packaging/*/scripts/control/**</exclude>
                            <exclude>packaging/*/scripts/init/**</exclude>
                            <exclude>**/*.log</exclude>
                            <exclude>**/*.current</exclude>
                            <exclude>.instance_id</exclude>
                            <exclude>src/main/scripts/control/**</exclude>
                            <exclude>src/browserslist</exclude>
                            <exclude>**/*.raw</exclude>
                        </excludes>
                        <mapping>
                            <proto>JAVADOC_STYLE</proto>
                            <cql>DOUBLEDASHES_STYLE</cql>
                            <scss>JAVADOC_STYLE</scss>
                            <jsx>SLASHSTAR_STYLE</jsx>
                            <tsx>SLASHSTAR_STYLE</tsx>
                            <conf>SCRIPT_STYLE</conf>
                            <gradle>JAVADOC_STYLE</gradle>
                        </mapping>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>check</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.0.2</version>
                    <configuration>
                        <excludes>
                            <exclude>**/logback.xml</exclude>
                        </excludes>
                        <archive>
                            <manifestEntries>
                                <Implementation-Title>${pkg.implementationTitle}</Implementation-Title>
                                <Implementation-Version>${project.version}</Implementation-Version>
                            </manifestEntries>
                        </archive>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>dockerfile-maven-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>build-docker-image</id>
                            <phase>pre-integration-test</phase>
                            <goals>
                                <goal>build</goal>
                            </goals>
                            <configuration>
                                <skip>${dockerfile.skip}</skip>
                                <repository>${docker.repo}/${docker.name}</repository>
                                <verbose>true</verbose>
                                <googleContainerRegistryEnabled>false</googleContainerRegistryEnabled>
                                <contextDirectory>${project.build.directory}/docker</contextDirectory>
                            </configuration>
                        </execution>
                        <execution>
                            <id>tag-docker-image</id>
                            <phase>pre-integration-test</phase>
                            <goals>
                                <goal>tag</goal>
                            </goals>
                            <configuration>
                                <skip>${dockerfile.skip}</skip>
                                <repository>${docker.repo}/${docker.name}</repository>
                                <tag>${project.version}</tag>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.thingsboard</groupId>
                <artifactId>gradle-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>com.mycila</groupId>
                <artifactId>license-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>default</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <!-- download sources under target/dependencies -->
        <!-- mvn package -Pdownload-dependencies -Dclassifier=sources dependency:copy-dependencies -->
        <profile>
            <id>download-dependencies</id>
            <properties>
                <downloadSources>true</downloadSources>
                <downloadJavadocs>true</downloadJavadocs>
            </properties>
        </profile>

        <profile>
            <id>push-docker-image</id>
            <activation>
                <property>
                    <name>push-docker-image</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.spotify</groupId>
                        <artifactId>dockerfile-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>push-latest-docker-image</id>
                                <phase>integration-test</phase>
                                <goals>
                                    <goal>push</goal>
                                </goals>
                                <configuration>
                                    <tag>latest</tag>
                                    <repository>${docker.repo}/${docker.name}</repository>
                                </configuration>
                            </execution>
                            <execution>
                                <id>push-version-docker-tb-ce-performance-test-image</id>
                                <phase>integration-test</phase>
                                <goals>
                                    <goal>push</goal>
                                </goals>
                                <configuration>
                                    <tag>${project.version}</tag>
                                    <repository>${docker.repo}/${docker.name}</repository>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>push-docker-amd-arm-images</id>
            <activation>
                <property>
                    <name>push-docker-amd-arm-images</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>push-latest-docker-amd-arm-images</id>
                                <phase>${docker.push-arm-amd-image.phase}</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <workingDirectory>${project.build.directory}/docker</workingDirectory>
                                    <arguments>
                                        <argument>buildx</argument>
                                        <argument>build</argument>
                                        <argument>-t</argument>
                                        <argument>${docker.repo}/${docker.name}:latest</argument>
                                        <argument>--platform=linux/amd64,linux/arm64</argument>
                                        <argument>-o</argument>
                                        <argument>type=registry</argument>
                                        <argument>.</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>push-version-docker-amd-arm-images</id>
                                <phase>${docker.push-arm-amd-image.phase}</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>docker</executable>
                                    <workingDirectory>${project.build.directory}/docker</workingDirectory>
                                    <arguments>
                                        <argument>buildx</argument>
                                        <argument>build</argument>
                                        <argument>-t</argument>
                                        <argument>${docker.repo}/${docker.name}:${project.version}</argument>
                                        <argument>--platform=linux/amd64,linux/arm64</argument>
                                        <argument>-o</argument>
                                        <argument>type=registry</argument>
                                        <argument>.</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${commons-lang3.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-math3</artifactId>
            <version>${commons-math3.version}</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.eclipse.paho</groupId>
            <artifactId>org.eclipse.paho.client.mqttv3</artifactId>
            <version>1.2.5</version>
        </dependency>

        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-codec-mqtt</artifactId>
            <version>${netty.version}</version>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-handler</artifactId>
            <version>${netty.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>3.0.1</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>
    </dependencies>

    <repositories>
        <repository>
            <id>central</id>
            <url>https://repo1.maven.org/maven2/</url>
        </repository>
        <repository>
            <id>spring-snapshots</id>
            <name>Spring Snapshots</name>
            <url>https://repo.spring.io/snapshot</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>typesafe</id>
            <name>Typesafe Repository</name>
            <url>https://repo.typesafe.com/typesafe/releases/</url>
        </repository>
        <repository>
            <id>sonatype</id>
            <url>https://oss.sonatype.org/content/groups/public</url>
        </repository>
        <repository>
            <id>jenkins</id>
            <name>Jenkins Repository</name>
            <url>https://repo.jenkins-ci.org/releases</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>bintray</id>
            <url>https://jcenter.bintray.com</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>

        <repository>
            <id>thingsboard-public-repo</id>
            <name>ThingsBoard Public Repo</name>
            <url>https://repo.thingsboard.io/artifactory/libs-release-public</url>
        </repository>
    </repositories>

</project>
